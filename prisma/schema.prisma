generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  tgUserId  Int     @unique
  firstName String
  lastName  String?
  username  String?

  pokerPlayer   PokerPlayer?
  pumpkinPlayer PumpkinPlayer[]
}

model PokerPlayer {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cards     Int[]
  balance   Int
  betAmount Int
  hasFolded Boolean
  hasLost   Boolean
  hasTurned Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  state   PokerState @relation(fields: [stateId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  stateId String     @db.ObjectId
}

model PokerState {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  tgChatId           Int         @unique
  cards              Int[]
  round              POKER_ROUND
  dealsCount         Int
  dealerIndex        Int
  currentPlayerIndex Int

  players PokerPlayer[]
}

enum POKER_ROUND {
  PREFLOP
  FLOP
  TURN
  RIVER
}

model PumpkinPlayer {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  tgChatId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  stats PumpkinStats[]

  @@unique([tgChatId, userId])
}

model PumpkinStats {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime

  player   PumpkinPlayer @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  playerId String        @db.ObjectId

  @@unique([playerId, date])
}
